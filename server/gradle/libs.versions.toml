[versions]
spring-boot = "3.1.4"
protobuf = "3.24.4"
grpc-net = "2.15.0.RELEASE"
grpc-io = "1.59.1"
testcontainers = "1.19.1"
spring-openapi = "2.2.0"



[plugins]
spring-plugin = { id = "org.springframework.boot", version.ref = "spring-boot" }
protobuf-plugin = { id = "com.google.protobuf", version = "0.9.4" }




[libraries]
###MAIN

#Spring
spring-starter = { module = "org.springframework.boot:spring-boot-starter", version.ref = "spring-boot" }
spring-web = { module = "org.springframework.boot:spring-boot-starter-web", version.ref = "spring-boot" }
spring-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator", version.ref = "spring-boot" }
spring-jpa = { module = "org.springframework.boot:spring-boot-starter-data-jpa", version.ref = "spring-boot" }
spring-email = { module = "org.springframework.boot:spring-boot-starter-mail", version.ref = "spring-boot" }
spring-security = { module = "org.springframework.boot:spring-boot-starter-security", version.ref = "spring-boot" }
spring-reactive = { module = "org.springframework.boot:spring-boot-starter-data-r2dbc", version.ref = "spring-boot" }
spring-netty = { module = "org.springframework.boot:spring-boot-starter-reactor-netty", version.ref = "spring-boot"}
spring-validation = { module = "org.springframework.boot:spring-boot-starter-validation", version.ref = "spring-boot" }

lombok = { module = "org.projectlombok:lombok", version = "1.18.30" }

###SpringDoc
openapi-starter = { module = "org.springdoc:springdoc-openapi-starter-webmvc-ui", version.ref = "spring-openapi" }
openapi-webflux = { module = "org.springdoc:springdoc-openapi-starter-webflux-ui", version.ref = "spring-openapi" }

hibernate-validator = { module = "org.hibernate.validator:hibernate-validator", version = "8.0.1.Final"}

#DB
postgresql-driver = { module = "org.postgresql:postgresql", version = "42.6.0" }
liquibase-driver = { module = "org.liquibase:liquibase-core", version = "4.24.0" }
r2dbc = { module = "io.r2dbc:r2dbc-postgresql", version = "0.8.13.RELEASE" }


#Grpc (net + io)
grpc-server = { module = "net.devh:grpc-server-spring-boot-autoconfigure", version.ref = "grpc-net" }
grpc-client = { module = "net.devh:grpc-client-spring-boot-starter", version.ref = "grpc-net"}
grpc-stub = { module = "io.grpc:grpc-stub", version.ref = "grpc-io" }
grpc-netty = { module = "io.grpc:grpc-netty-shaded", version.ref = "grpc-io" }
grpc-gen = { module = "io.grpc:protoc-gen-grpc-java", version.ref = "grpc-io" }
grpc-protobuf = { module = "io.grpc:grpc-protobuf", version.ref = "grpc-io"}

#Protobuf
protobuf-driver = { module = "com.google.protobuf:protobuf-java", version.ref = "protobuf" }
protobuf-protoc = { module = "com.google.protobuf:protoc", version.ref = "protobuf" }

#Javax
javax-annotation = { module = "javax.annotation:javax.annotation-api", version = "1.3.2" }

###TEST
spring-test = { module = "org.springframework.boot:spring-boot-starter-test", version.ref="spring-boot" }

testcontainers-core = { module = "org.testcontainers:testcontainers", version.ref = "testcontainers" }
testcontainers-jupiter = { module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers" }
testcontainers-postgresql = { module = "org.testcontainers:postgresql", version.ref = "testcontainers" }

grpc-test = { module = "io.grpc:grpc-testing", version.ref = "grpc-io"}

jupiter = { module = "org.junit.jupiter:junit-jupiter", version = "5.10.0" }




[bundles]
minimal-spring-boot = [ "spring-starter", "spring-web", "spring-actuator", "spring-netty" ]

minimal-grpc = [ "grpc-server", "grpc-stub", "grpc-netty", "grpc-gen", "grpc-protobuf", "protobuf-driver", "protobuf-protoc"]

minimal-db = [  "liquibase-driver", "postgresql-driver", "spring-jpa"]
